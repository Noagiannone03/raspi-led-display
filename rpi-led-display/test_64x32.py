#!/usr/bin/env python3
"""
Test pour panneau 64√ó32 (plus tol√©rant aux signaux 3.3V)
Ces panneaux fonctionnent souvent SANS level shifter !
"""

import sys
import os
import time

# Argument : num√©ro de config
config_num = 0
if len(sys.argv) > 1:
    try:
        config_num = int(sys.argv[1])
    except ValueError:
        pass

script_dir = os.path.dirname(os.path.abspath(__file__))
rgb_matrix_path = os.path.join(script_dir, 'rpi-rgb-led-matrix', 'bindings', 'python')
sys.path.insert(0, rgb_matrix_path)

try:
    from rgbmatrix import RGBMatrix, RGBMatrixOptions
except ImportError as e:
    print("ERREUR: Module rgbmatrix non trouv√©")
    print(f"D√©tail: {e}")
    sys.exit(1)

print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   TEST PANNEAU 64√ó32                                      ‚ïë
‚ïë   Ces panneaux sont plus tol√©rants aux signaux 3.3V !    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")

print("Les panneaux 64√ó32 utilisent souvent des chips 74HCT245")
print("qui acceptent mieux les signaux 3.3V que les 128√ó64.")
print("")
print("Si votre panneau 64√ó32 a des chips 74HCT245 ‚Üí Devrait marcher !")
print("Si il a des chips 74HC245 ‚Üí Peut avoir des probl√®mes...")
print("")

# Configurations pour 64√ó32
configs = [
    # Configurations standard 64√ó32
    {"name": "64√ó32 standard, scan 1/16", "rows": 32, "cols": 64, "chain": 1, "parallel": 1, "row_addr": 0, "multiplex": 0, "slowdown": 1},
    {"name": "64√ó32 standard, scan 1/16, slowdown=2", "rows": 32, "cols": 64, "chain": 1, "parallel": 1, "row_addr": 0, "multiplex": 0, "slowdown": 2},
    {"name": "64√ó32 standard, scan 1/8", "rows": 16, "cols": 64, "chain": 1, "parallel": 2, "row_addr": 0, "multiplex": 0, "slowdown": 1},

    # Avec multiplexing
    {"name": "64√ó32, mux=1 (Stripe)", "rows": 32, "cols": 64, "chain": 1, "parallel": 1, "row_addr": 0, "multiplex": 1, "slowdown": 2},
    {"name": "64√ó32, mux=2 (Checkered)", "rows": 32, "cols": 64, "chain": 1, "parallel": 1, "row_addr": 0, "multiplex": 2, "slowdown": 2},

    # Avec diff√©rents row_address_type
    {"name": "64√ó32, row_addr=1", "rows": 32, "cols": 64, "chain": 1, "parallel": 1, "row_addr": 1, "multiplex": 0, "slowdown": 2},
    {"name": "64√ó32, row_addr=2", "rows": 32, "cols": 64, "chain": 1, "parallel": 1, "row_addr": 2, "multiplex": 0, "slowdown": 2},

    # Slowdown √©lev√© pour aider la d√©tection 3.3V
    {"name": "64√ó32, slowdown=3", "rows": 32, "cols": 64, "chain": 1, "parallel": 1, "row_addr": 0, "multiplex": 0, "slowdown": 3},
    {"name": "64√ó32, slowdown=4", "rows": 32, "cols": 64, "chain": 1, "parallel": 1, "row_addr": 0, "multiplex": 0, "slowdown": 4},
]

if config_num >= len(configs):
    print(f"‚ùå Config {config_num} n'existe pas (max = {len(configs) - 1})")
    print("\nConfigurations disponibles:")
    for i, c in enumerate(configs):
        print(f"  {i}: {c['name']}")
    sys.exit(1)

config = configs[config_num]

print(f"Configuration {config_num}/{len(configs) - 1} : {config['name']}")
print("")

try:
    options = RGBMatrixOptions()
    options.rows = config['rows']
    options.cols = config['cols']
    options.chain_length = config['chain']
    options.parallel = config['parallel']
    options.row_address_type = config['row_addr']
    options.multiplexing = config['multiplex']
    options.gpio_slowdown = config['slowdown']
    options.hardware_mapping = 'regular'
    options.brightness = 80
    options.disable_hardware_pulsing = False

    print("Param√®tres:")
    print(f"  rows = {options.rows}")
    print(f"  cols = {options.cols}")
    print(f"  chain_length = {options.chain_length}")
    print(f"  parallel = {options.parallel}")
    print(f"  row_address_type = {config['row_addr']}")
    print(f"  multiplexing = {config['multiplex']}")
    print(f"  gpio_slowdown = {config['slowdown']}")
    print("")

    print("Cr√©ation de la matrice...")
    matrix = RGBMatrix(options=options)

    width = matrix.width
    height = matrix.height

    print(f"‚úì Matrice cr√©√©e : {width}√ó{height}")
    print("")

    # Test 1 : TOUT en blanc
    print("1Ô∏è‚É£  Remplir TOUT l'√©cran en BLANC (3 secondes)")
    for y in range(height):
        for x in range(width):
            matrix.SetPixel(x, y, 255, 255, 255)
    time.sleep(3)

    # Test 2 : 3 bandes verticales RGB
    print("2Ô∏è‚É£  3 bandes verticales : ROUGE | VERT | BLEU (3 secondes)")
    matrix.Clear()

    for y in range(height):
        for x in range(0, width // 3):
            matrix.SetPixel(x, y, 255, 0, 0)  # ROUGE
        for x in range(width // 3, 2 * width // 3):
            matrix.SetPixel(x, y, 0, 255, 0)  # VERT
        for x in range(2 * width // 3, width):
            matrix.SetPixel(x, y, 0, 0, 255)  # BLEU

    time.sleep(3)

    # Test 3 : Bandes horizontales
    print("3Ô∏è‚É£  3 bandes HORIZONTALES : ROUGE | VERT | BLEU (3 secondes)")
    matrix.Clear()

    for y in range(0, height // 3):
        for x in range(width):
            matrix.SetPixel(x, y, 255, 0, 0)  # ROUGE
    for y in range(height // 3, 2 * height // 3):
        for x in range(width):
            matrix.SetPixel(x, y, 0, 255, 0)  # VERT
    for y in range(2 * height // 3, height):
        for x in range(width):
            matrix.SetPixel(x, y, 0, 0, 255)  # BLEU

    time.sleep(3)

    # Test 4 : Damier
    print("4Ô∏è‚É£  Damier (2 secondes)")
    matrix.Clear()
    for y in range(height):
        for x in range(width):
            if (x // 4 + y // 4) % 2 == 0:
                matrix.SetPixel(x, y, 255, 255, 0)  # JAUNE

    time.sleep(2)

    # Test 5 : Bordure
    print("5Ô∏è‚É£  Bordure rouge (2 secondes)")
    matrix.Clear()

    for x in range(width):
        matrix.SetPixel(x, 0, 255, 0, 0)
        if height > 1:
            matrix.SetPixel(x, height - 1, 255, 0, 0)

    for y in range(height):
        matrix.SetPixel(0, y, 255, 0, 0)
        if width > 1:
            matrix.SetPixel(width - 1, y, 255, 0, 0)

    time.sleep(2)

    matrix.Clear()

    print("")
    print("="*80)
    print("R√âSULTATS √Ä V√âRIFIER :")
    print("="*80)
    print("  1. TOUT l'√©cran (64√ó32) √©tait-il rempli en BLANC ?")
    print("  2. Les 3 couleurs (ROUGE, VERT, BLEU) s'affichaient-elles TOUTES ?")
    print("  3. Les bandes verticales ET horizontales √©taient correctes ?")
    print("  4. Le damier couvrait tout l'√©cran ?")
    print("  5. La bordure faisait le tour complet ?")
    print("="*80)
    print("")

    response = input("TOUT √©tait PARFAIT ? (o/N) : ")

    if response.lower() == 'o':
        print("")
        print("="*80)
        print("üéâüéâüéâ CONFIGURATION TROUV√âE ! üéâüéâüéâ")
        print("="*80)
        print("")
        print("Configuration pour votre panneau 64√ó32 :")
        print("")
        print("options = RGBMatrixOptions()")
        print(f"options.rows = {options.rows}")
        print(f"options.cols = {options.cols}")
        print(f"options.chain_length = {options.chain_length}")
        print(f"options.parallel = {options.parallel}")
        print(f"options.row_address_type = {config['row_addr']}")
        print(f"options.multiplexing = {config['multiplex']}")
        print(f"options.gpio_slowdown = {config['slowdown']}")
        print(f"options.hardware_mapping = 'regular'")
        print(f"options.brightness = 80")
        print("")
        print("="*80)

        # Sauvegarder
        with open('CONFIG_64x32_SANS_HAT.txt', 'w') as f:
            f.write("# Configuration pour panneau 64√ó32 SANS HAT (3.3V direct)\n\n")
            f.write("options = RGBMatrixOptions()\n")
            f.write(f"options.rows = {options.rows}\n")
            f.write(f"options.cols = {options.cols}\n")
            f.write(f"options.chain_length = {options.chain_length}\n")
            f.write(f"options.parallel = {options.parallel}\n")
            f.write(f"options.row_address_type = {config['row_addr']}\n")
            f.write(f"options.multiplexing = {config['multiplex']}\n")
            f.write(f"options.gpio_slowdown = {config['slowdown']}\n")
            f.write(f"options.hardware_mapping = 'regular'\n")
            f.write(f"options.brightness = 80\n")

        print("‚úì Configuration sauvegard√©e dans CONFIG_64x32_SANS_HAT.txt")
        print("")
    else:
        print("")
        print("D√©crivez ce que vous avez vu :")
        print("  - Toutes les couleurs (R, V, B) s'affichent ?")
        print("  - Ou seulement une couleur (comme avec le 128√ó64) ?")
        print("  - Tout l'√©cran s'allume ?")
        print("")
        print(f"Pour tester la config suivante : sudo python3 test_64x32.py {config_num + 1}")

except Exception as e:
    print(f"\n‚úó Erreur : {e}")
    import traceback
    traceback.print_exc()

print("")
print("="*80)
print("CONFIGURATIONS √Ä TESTER (dans l'ordre) :")
print("="*80)
for i, c in enumerate(configs):
    marker = "‚Üê" if i == config_num else ""
    print(f"  sudo python3 test_64x32.py {i}  # {c['name']} {marker}")
print("="*80)
print("")
print("üí° CONSEIL : Commencez par config 0 (standard)")
print("   Si tout VERT comme avec le 128√ó64 ‚Üí Essayez config 7 et 8 (slowdown √©lev√©)")
